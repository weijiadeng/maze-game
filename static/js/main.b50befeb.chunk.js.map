{"version":3,"sources":["Labyrinth/Controls/controlSlice.js","Labyrinth/Controls/GamePanel.jsx","Labyrinth/Controls/Controls.jsx","Utils/Utils.js","Labyrinth/Walls.jsx","Labyrinth/Labyrinth.jsx","App.js","store.js","index.js"],"names":["controlSlice","createSlice","name","initialState","direction","posX","posZ","currentAction","reducers","moveForward","state","console","log","turnLeft","turnRight","popEvent","assignPosX","action","payload","assignPosZ","actions","selectDirection","control","selectPosX","selectPosZ","selectAction","GamePanel","dispatch","useDispatch","document","addEventListener","event","key","window","history","go","className","onClick","extend","TrackballControls","Controls","wallTop","wallLeft","blockWidth","startCoordX","startCoordZ","moveSpeed","turnSpeed","useThree","camera","gl","useSelector","React","currentAngle","setCurrentAngle","localAngle","coordX","coordZ","useFrame","position","z","lookAt","x","rotateY","THREE","degToRad","updateProjectionMatrix","args","domElement","dynamicDampingFactor","UnionFind","elementNum","this","partsCount","path","Array","apply","length","map","Number","call","rank","index","left","right","leftRoot","find","rightRoot","getWallNeighbourCells","numX","numCells","wallIndex","initLabyrinthWalls","numY","unionFind","wallArray","resArray","i","push","currentPos","targetArray","j","Math","floor","random","tmp","shuffleArray","currentWall","neighborA","neighborB","union","fill","GenHorizontalWall","width","height","depth","rotation","color","attach","GenVerticalWall","PI","Walls","numZ","blockHeight","blockDepth","mazeWidth","mazeDepth","walls","Labyrinth","props","posCoordX","posCoordY","ContextBridge","useContextBridge","ReactReduxContext","fov","intensity","Sky","distance","sunPosition","inclination","azimuth","rotation-x","opacity","App","configureStore","reducer","controlReducer","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.b50befeb.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const MOVE_FORWARD = 0;\nexport const TURN_LEFT = 1;\nexport const TURN_RIGHT = 2;\nexport const NOTHING = 3;\nexport const UNINIT = -1;\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\n\nexport const controlSlice = createSlice({\n  name: 'control',\n  initialState: {\n    direction: 0,\n    posX: UNINIT,\n    posZ: UNINIT,\n    // Used to block a new action when an action is exectuting\n    currentAction: 0,\n  },\n  reducers: {\n    moveForward: state => {\n      if (state.currentAction === NOTHING) {\n        state.currentAction = MOVE_FORWARD;\n        switch (state.direction) {\n          case UP: state.posZ -= 1;\n            break;\n          case RIGHT:\n            state.posX -= 1;\n            break;\n          case DOWN:\n            state.posZ += 1;\n            break;\n          case LEFT:\n            state.posX += 1;\n            break;\n          default:\n            console.log(\"Direction error: \", state.direction);\n        }\n      }\n    },\n    turnLeft: state => {\n      if (state.currentAction === NOTHING) {\n        state.currentAction = TURN_LEFT;\n        state.direction = (state.direction + 1) % 4;\n      }\n    },\n    turnRight: state => {\n      if (state.currentAction === NOTHING) {\n        state.currentAction = TURN_RIGHT;\n        state.direction = ((state.direction - 1) % 4 + 4) % 4;\n      }\n    },\n    popEvent: state => {\n      state.currentAction = NOTHING;\n    },\n    assignPosX: (state, action) => {\n      state.posX = action.payload;\n    },\n    assignPosZ: (state, action) => {\n      state.posZ = action.payload;\n    }\n\n  },\n});\n\n\nexport const { moveForward, turnLeft, turnRight, popEvent, assignPosX, assignPosZ } = controlSlice.actions;\n\nexport const selectDirection = state => state.control.direction;\nexport const selectPosX = state => state.control.posX;\nexport const selectPosZ = state => state.control.posZ;\nexport const selectAction = state => state.control.currentAction;\n\n\nexport default controlSlice.reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  moveForward,\n  turnLeft,\n  turnRight,\n\n} from './controlSlice';\n\n\nexport function GamePanel() {\n\n  const dispatch = useDispatch();\n\n  const handleMoveForward = () => {\n    dispatch(moveForward());\n  };\n  const handleTurnLeft = () => {\n    dispatch(turnLeft());\n  };\n  const handleTurnRight = () => {\n    dispatch(turnRight());\n  };\n\n  const handleKeyDown = (event) => {\n    switch (event.key) {\n      case 'Enter':\n        window.history.go(0);\n        break;\n      case 'ArrowLeft':\n        handleTurnLeft();\n        break;\n      case 'ArrowRight':\n        handleTurnRight();\n        break;\n      case 'ArrowUp':\n        handleMoveForward();\n        break;\n      default:\n        break;\n    }\n  }\n\n  document.addEventListener(\"keydown\", handleKeyDown);\n\n\n  return (\n    <div>\n      <button className=\"button forward-button\" onClick={() => dispatch(moveForward())}>\n        Move Forward\n        </button>\n      <button className=\"button turn-left-button\" onClick={() => dispatch(turnLeft())}>\n        Turn Left\n        </button>\n      <button className=\"button turn-right-button\" onClick={() => dispatch(turnRight())}>\n        Turn Right\n        </button>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\nimport * as THREE from 'three';\nimport {\n  selectAction,\n  selectPosX,\n  selectPosZ,\n  popEvent,\n  selectDirection,\n  MOVE_FORWARD,\n  TURN_LEFT,\n  TURN_RIGHT,\n  NOTHING,\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT\n} from './controlSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\n// extend THREE to include TrackballControls\nextend({ TrackballControls });\n\nexport const Controls = ({\n  wallTop,\n  wallLeft,\n  blockWidth,\n  startCoordX,\n  startCoordZ,\n  moveSpeed,\n  turnSpeed,\n}) => {\n  const { camera, gl } = useThree();\n\n  const currentAction = useSelector(selectAction);\n  const posX = useSelector(selectPosX);\n  const posZ = useSelector(selectPosZ);\n  const direction = useSelector(selectDirection);\n  // Current angle is the remaining angle the camera needs to rotate\n  const [currentAngle, setCurrentAngle] = React.useState(0);\n  let localAngle = currentAngle;\n\n  const coordX = (-blockWidth / 2 + posX * blockWidth + startCoordX);\n  const coordZ = (-blockWidth / 2 + posZ * blockWidth + startCoordZ);\n\n  const dispatch = useDispatch();\n\n  useFrame(() => {\n    // console.log(posX, coordX, camera.position.x)\n    // update the view as the vis is interacted with\n    // controls.current.update();\n    switch (currentAction) {\n      case MOVE_FORWARD:\n        switch (direction) {\n          case UP:\n            if (camera.position.z > coordZ) {\n              camera.position.z -= moveSpeed;\n              camera.lookAt(camera.position.x, 0, coordZ - 10);\n            }\n            break;\n          case LEFT:\n            if (camera.position.x < coordX) {\n              camera.position.x += moveSpeed;\n              camera.lookAt(coordX + 10, 0, camera.position.z);\n            }\n            break;\n          case DOWN:\n            if (camera.position.z < coordZ) {\n              camera.position.z += moveSpeed;\n              camera.lookAt(camera.position.x, 0, coordZ + 10);\n            }\n            break;\n          case RIGHT:\n            if (camera.position.x > coordX) {\n              camera.position.x -= moveSpeed;\n              camera.lookAt(coordX - 10, 0, camera.position.z);\n            }\n            break;\n          default:\n            console.log(\"direction error!\");\n        }\n        if (camera.position.x === coordX) {\n          if (camera.position.z === coordZ) {\n            console.log(\"success\");\n            dispatch(popEvent());\n          }\n        }\n        break;\n      case TURN_LEFT:\n        if (currentAngle === 0) {\n          localAngle = currentAngle + 90;\n          setCurrentAngle(localAngle);\n        }\n        if (currentAngle > 0) {\n          camera.rotateY(THREE.Math.degToRad(2));\n          localAngle -= turnSpeed;\n          setCurrentAngle(localAngle);\n        }\n        if (localAngle === 0) {\n          dispatch(popEvent());\n        }\n        break;\n      case TURN_RIGHT:\n        if (currentAngle === 0) {\n          setCurrentAngle(currentAngle - 90);\n          localAngle = currentAngle - 90;\n        }\n        if (localAngle < 0) {\n          camera.rotateY(THREE.Math.degToRad(-2));\n          localAngle += turnSpeed;\n          setCurrentAngle(localAngle);\n        }\n        if (localAngle === 0) {\n          dispatch(popEvent());\n        }\n        break;\n      case NOTHING:\n        break;\n      default:\n        console.log(\"button error!\");\n    }\n    camera.updateProjectionMatrix()\n  });\n\n  return (\n    <trackballControls\n      args={[camera, gl.domElement]}\n      dynamicDampingFactor={0.1}\n    />\n  );\n};\n","export class UnionFind {\n    partsCount;\n    rank;\n    path;\n\n    constructor(elementNum) {\n        this.partsCount = elementNum;\n        this.path = Array.apply(null, { length: elementNum }).map(Number.call, Number)\n        this.rank = Array.apply(0, { length: elementNum });\n    }\n\n    find(index) {\n        while (index !== this.path[index]) {\n            this.path[index] = this.path[this.path[index]];\n            index = this.path[index];\n        }\n        return index;\n    }\n\n    union(left, right) {\n        const leftRoot = this.find(left);\n        const rightRoot = this.find(right);\n        if (leftRoot === rightRoot) {\n            return;\n        }\n        this.partsCount -= 1;\n        if (this.rank[leftRoot] < this.rank[rightRoot]) {\n            this.path[leftRoot] = rightRoot;\n        } else if (this.rank[leftRoot] > this.rank[rightRoot]) {\n            this.path[rightRoot] = leftRoot;\n        } else {\n            this.path[leftRoot] = rightRoot;\n            this.rank[rightRoot] += 1;\n        }\n    }\n}\n\nexport function shuffleArray(targetArray) {\n    // Reference: https://stackoverflow.com/questions/3943772/how-do-i-shuffle-the-characters-in-a-string-in-javascript\n    const length = targetArray.length;\n    for (let i = length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let tmp = targetArray[i];\n        targetArray[i] = targetArray[j];\n        targetArray[j] = tmp;\n    }\n    return targetArray;\n}\n","import * as React from 'react';\nimport { shuffleArray, UnionFind } from \"../Utils/Utils\";\nimport { Box } from '@react-three/drei'\n\n// Wall global index definination example:\n// (The below two pictures are the same 3*3 maze, we separte vertical and horizontal walls to make it looks more clear)\n//\n//   012\n//   ---\n//   345\n//   ---\n//   678\n//\n//  9|10|11|\n// 12|13|14|\n// 15|16|17|\n//\n\n/* Given an wall index, output the neighbour cell index (In x+z*numZ format) */\nfunction getWallNeighbourCells(numX, numCells, wallIndex) {\n  if (wallIndex < numCells) {\n    // wallIndex < numCells, it is a horizontal wall\n    return [wallIndex - numX, wallIndex];\n  } else {\n    return [wallIndex - numCells - 1, wallIndex - numCells];\n  }\n}\n\nexport function initLabyrinthWalls(numX, numY) {\n  // The algorithm is:\n  // We put all cells of a maze into a disjointed set, and set them as\n  // disjointed. Then we random select a wall. If the two cells separated\n  // by the wall is not connected, we tear down the wall, otherwise we keep\n  // the wall and choose another wall. We do this until there's only only\n  // connecting compoments left.\n  const numCells = numX * numY;\n  const unionFind = new UnionFind(numCells);\n  let wallArray = [];\n  let resArray = [];\n  for (let i = numX; i < numCells; i++) {\n    wallArray.push(i);\n  }\n  for (let i = numCells; i < numCells * 2; i++) {\n    if (i % numX !== 0) {\n      wallArray.push(i);\n    }\n  }\n  wallArray = shuffleArray(wallArray);\n  let currentPos = wallArray.length - 1;\n\n  do {\n    const currentWall = wallArray[currentPos];\n    const [neighborA, neighborB] = getWallNeighbourCells(\n      numX,\n      numCells,\n      currentWall\n    );\n    if (unionFind.find(neighborA) === unionFind.find(neighborB)) {\n      resArray.push(currentWall);\n    } else {\n      unionFind.union(neighborA, neighborB);\n    }\n    currentPos -= 1;\n  } while (unionFind.partsCount !== 1);\n  while (currentPos >= 0) {\n    resArray.push(wallArray[currentPos]);\n    currentPos -= 1;\n  }\n\n  const wallLeft = Array.apply(null, { length: numCells }).fill(false);\n  const wallTop = Array.apply(null, { length: numCells }).fill(false);\n  for (let i = 0; i < numX; i++) {\n    wallTop[i] = true;\n  }\n  for (let i = 0; i < numY; i++) {\n    wallLeft[i * numX] = true;\n  }\n  for (let i = 0; i < resArray.length; i++) {\n    if (resArray[i] < numCells) {\n      wallTop[resArray[i]] = true;\n    } else {\n      wallLeft[resArray[i] - numCells] = true;\n    }\n  }\n  return [wallLeft, wallTop];\n}\n\nfunction GenHorizontalWall(x, z, width, height, depth) {\n  return (\n    <Box args={[width, height, depth]} rotation={[0, 0, 0]} position={[x + width / 2, 0, z]}>\n      <meshPhongMaterial color=\"orange\" attach=\"material\" />\n    </Box>\n  );\n}\n\nfunction GenVerticalWall(x, z, width, height, depth) {\n  return (\n    <Box args={[width, height, depth]} rotation={[0, Math.PI * 0.5, 0]} position={[x, 0, z + width / 2]}>\n      <meshPhongMaterial color=\"orange\" attach=\"material\" />\n    </Box>\n  );\n}\n\nexport function Walls(\n  { numX,\n    numZ,\n    wallTop,\n    wallLeft,\n    blockWidth,\n    blockHeight,\n    blockDepth,\n    mazeWidth,\n    mazeDepth }\n) {\n  const walls = [];\n  for (let i = 0; i < numX; i++) {\n    for (let j = 0; j < numZ; j++) {\n      if (wallTop[i + numX * j]) {\n        walls.push(\n          GenHorizontalWall(\n            -mazeWidth + i * blockWidth - blockDepth / 2,\n            -mazeDepth + j * blockWidth,\n            blockWidth + blockDepth,\n            blockHeight,\n            blockDepth\n          )\n        );\n      }\n      if (i === 0 && j === 0) {\n        continue;\n      }\n      if (wallLeft[i + numX * j]) {\n        walls.push(\n          GenVerticalWall(\n            -mazeWidth + i * blockWidth,\n            -mazeDepth + j * blockWidth - blockDepth / 2,\n            blockWidth + blockDepth,\n            blockHeight,\n            blockDepth\n          )\n        );\n      }\n    }\n  }\n  for (let i = 0; i < numX - 1; i++) {\n    walls.push(\n      GenHorizontalWall(\n        -mazeWidth + i * blockWidth - blockDepth / 2,\n        -mazeDepth + numZ * blockWidth,\n        blockWidth + blockDepth,\n        blockHeight,\n        blockDepth\n      )\n    );\n  }\n  for (let i = 0; i < numZ; i++) {\n    walls.push(\n      GenVerticalWall(\n        -mazeWidth + numX * blockWidth,\n        -mazeDepth + i * blockWidth - blockDepth / 2,\n        blockWidth + blockDepth,\n        blockHeight,\n        blockDepth\n      )\n    );\n  }\n  return (\n    <group name=\"walls\">\n      {walls}\n    </group>\n  );\n}\n","import * as React from 'react';\nimport { Canvas, useFrame, useUpdate } from 'react-three-fiber'\nimport { Controls } from './Controls/Controls';\nimport { ReactReduxContext } from 'react-redux';\nimport * as THREE from \"three\";\nimport { Walls, initLabyrinthWalls } from './Walls';\nimport { Sky, Plane, useContextBridge } from '@react-three/drei'\nimport {\n  assignPosX,\n  assignPosZ,\n  selectPosX,\n  selectPosZ,\n  UNINIT,\n} from './Controls/controlSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"./Labyrinth.css\"\n\nexport function Labyrinth(props) {\n\n  const numX = props.numX;\n  const numZ = props.numZ;\n  const blockWidth = props.blockWidth;\n  const blockHeight = props.blockHeight;\n  const blockDepth = props.blockDepth;\n  const mazeDepth = props.mazeDepth;\n  const mazeWidth = props.mazeWidth;\n\n  // Direction definination:\n  //\n  //             top\n  //      ^\n  //      |\n  //      | z\n  //      | \n  // left | a             right\n  //      | x\n  //      | i\n  //      | s\n  //      |______________>\n  //            x axis\n  //\n  //            bottom\n\n  // WallLeft and wall top are two conceptual matrix of booleans(they are flattened to arrays for performance), recording\n  // whether a wall exist or not for a certain cell.\n  //\n  // wallTop: whether the wall on the top(in the 2D world) of a cell exists\n  // wallLeft: whether the wall on the left of a cell exists\n  // The isExist information for the wall on the right of the cell is provided by the wallLeft of the cell's right neighbour cell, so as for\n  // the bottom wall.\n  //\n  // To lookup the top wall info cell(x, y), we call wallTop[x + y*numZ]\n  const [[wallLeft, wallTop],] = React.useState(initLabyrinthWalls(numX, numZ));\n\n  const posX = useSelector(selectPosX);\n  const posZ = useSelector(selectPosZ);\n  const dispatch = useDispatch();\n\n  if (posX === UNINIT) {\n    dispatch(assignPosX(Number(numX)));\n  }\n  if (posZ === UNINIT) {\n    dispatch(assignPosZ(Number(numZ)))\n  }\n\n  // Starting point in the x and z axis(this is coordinate, not index)\n  const startCoordX = -numX * blockWidth / 2;\n  const startCoordZ = -numZ * blockWidth / 2;\n  // Get the current logical coordinate\n  const posCoordX = -blockWidth / 2 + numX * blockWidth + startCoordX;\n  const posCoordY = -blockWidth / 2 + numZ * blockWidth + startCoordZ;\n\n  // Needed to use react-redux in react-three-fiber canvas. \n  // For details: https://standard.ai/blog/introducing-standard-view-and-react-three-fiber-context-bridge/\n  const ContextBridge = useContextBridge(ReactReduxContext);\n\n  return (\n    <div className=\"canvas-div\">\n      <Canvas camera={{\n        fov: 80, position: [posCoordX, 0, posCoordY + blockWidth]\n      }}>\n        {/* TODO(weijia): Add params to the controls */}\n        <ContextBridge>\n          <Controls\n            wallTop={wallTop}\n            wallLeft={wallLeft}\n            blockWidth={blockWidth}\n            startCoordX={startCoordX}\n            startCoordZ={startCoordZ}\n            moveSpeed={0.5}\n            turnSpeed={2}\n          />\n        </ContextBridge>\n        <ambientLight color=\"#ffffff\" intensity={0.4} />\n        {/* Reference: https://drei.pmnd.rs/?path=/story/shaders-softshadows--soft-shadows-st\n            Make the light the same direction with the sun\n        */}\n        <directionalLight\n          position={[-500, 20, startCoordZ + blockWidth / 2]}\n          intensity={1.5}\n        />\n        <Walls\n          numX={numX}\n          numZ={numZ}\n          wallTop={wallTop}\n          wallLeft={wallLeft}\n          blockWidth={blockWidth}\n          blockHeight={blockHeight}\n          blockDepth={blockDepth}\n          mazeWidth={mazeWidth}\n          mazeDepth={mazeDepth}\n        />\n        <Sky\n          distance={10000} // Camera distance (default=450000)\n          // Sun position normal(Make the exit faces the sun, x should be less than -mazeWidth+blockWidth, \n          // y should be greater than 0, z should be -mazeHeight+blockWidth)\n          sunPosition={[-500, 20, startCoordZ + blockWidth / 2]}\n          inclination={0} // Sun elevation angle from 0 to 1 (default=0)\n          azimuth={0.25} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n        />\n        <Plane rotation-x={-Math.PI / 2} position={[0, -10, 0]} args={[400, 400, 4, 4]}>\n          <meshBasicMaterial attach=\"material\" opacity={0.5} color=\"#405940\" />\n        </Plane>\n      </Canvas>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { GamePanel } from './Labyrinth/Controls/GamePanel';\nimport { Labyrinth } from './Labyrinth/Labyrinth';\nimport './styles.css';\n\nexport default function App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"vis-container\">\n        <Labyrinth\n          numX={10}\n          numZ={10}\n          blockWidth={40}\n          blockHeight={20}\n          blockDepth={1}\n          mazeDepth={200}\n          mazeWidth={200}\n        />\n        <GamePanel />\n        <button className=\"button new-game-button\" onClick={() => window.history.go(0)}>\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport controlReducer from './Labyrinth/Controls/controlSlice';\n\nexport default configureStore({\n  reducer: {\n    control: controlReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport store from './store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}